1. Cluster in Mongo  Atlas

Conn String: mongodb+srv://<username>:<password>@cluster0.imo0m.mongodb.net/myFirstDatabase?retryWrites=true&w=majority
user: taskcarlos
pw: vKi759EkWU37QjUE

2. Instal Mongoose
npm install --save mongoose

3. Make the connection in the app.js file.

----nodemon.json code
{
    "env":{
        "MONGO_ATLAS_USER": "taskcarlos",
        "MONGO_ATLAS_PW": "vKi759EkWU37QjUE"
    }
}

---------Product Model Code

const mongoose = require('mongoose')

const Product = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    name: String,
    price: Number
})

module.exports = mongoose.model('Product', Product)

------------------Update the products endpoints
const express = require('express')

const router = express.Router()

const Product = require('../models/product')
const mongoose = require('mongoose')


router.get('/', (req, res, next) => {

    Product.find() // .where , .limit   we could use more query operators
    .exec()
    .then(result => {
        console.log('FROM DB: ', result)
        res.status(200).json({
            message: 'Handling GET requests for /products',
            products: result
        })
        // if (result.length > 0){
        //     res.status(200).json({
        //         message: 'Handling GET requests for /products',
        //         products: result
        //     })
        // }
        // else{
        //     res.status(404).json({
        //         message: 'No Entries found'
        //     })
        // }
    })
    
    .catch(err => {
        console.log('FROM DB: ', err)
        res.status(500).json({
            error: err
        })
    })

})

router.get('/:id', (req, res, next) => {
   const _id = req.params.id
//    Product.findOne({ _id })
   Product.findById(_id)
   .exec()
   .then( result => {
       console.log('From DB: ', result)
       if (result){
            res.status(200).json({
                message: 'Handling GET requests for /products/id',
                product: result
            })
       }
       else{
            res.status(404).json({
                message: 'No valid entrty found for provided ID'
            })
       }
   })
   .catch(err => {
       console.log(err)
       res.status(500).json({
           error: err
       })
   })
})

router.post('/', (req, res, next) => {
    const product = new Product({
        _id: new mongoose.Types.ObjectId(),
        name: req.body.name,
        price: req.body.price
    })

    product.save() //save is a method provided by mongoose to be used on mongoose models to store them in the b. 
    // .exec() // exec will turn thei request into a promise. DO not need to use exec()
    // /We instead use promise
    .then( result => {
        console.log(result)
        res.status(201).json({
            message: 'Handling POST requests to /products',
            createdProduct: product
        })
    })
    .catch(err => {
        console.log(err)
        res.status(500).json({
            error: err
        })
    })
   
})

// router.put('/:id', (req, res, next) => {
//     res.status(200).json({
//         message:'Hello from Put',   
//         body: req.body,
//         id: req.params.id
//     })
// })

router.patch('/:id', (req, res, next) => {
    // const { name, price } = req.body
    const _id = req.params.id
    const updateProps = {};
    for (const props of req.body){
        updateProps[props.propName] = props.value
    }

    Product.findByIdAndUpdate({ _id }, { $set: updateProps })
    // Product.update({ _id }, { $set: updateProps })
    .exec()
    .then(result => {
        console.log('From DB: ', result)
        res.status(200).json({
            message: 'Handling PATCH requests to /products',
            result: result
        })
    })
    .catch(err => {
        console.log(err)
        res.status(500).json({
            error: err
        })
    })
})

router.delete('/:id', (req, res, next) => {
    const _id = req.params.id
    // Product.findByIdAndDelete({ _id })
    Product.remove({ _id })
    .exec()
    .then(result => {
        console.log('From DB: ', result)
        res.status(200).json({
            message: 'Handling DELETE requests to /products',
            result: result
        })
    })
    .catch(err => {
        console.log('Error', err)
        res.status(500).json({
            message: 'Error on handling DELETE requests to /products',
            error: err
        })
    })
})


module.exports = router



--------------- Fetch code to the POST handler of products

fetch('http://localhost:3000/products',{headers:{'Content-Type': 'application/json'}, method: 'POST', body: JSON.stringify({
    name: 'computer',
    price: 500
})})
.then(x => x.json())
.then(x => console.log({ ...x }))

--------------- Fetch code to the GET handler of /product/id
fetch('http://localhost:3000/products/61acf4c47a6e1e52491a3706')
.then(x => x.json())
.then(x => console.log({ ...x }))

-------------- Fetch Delete
fetch('http://localhost:3000/products/61acf4c47a6e1e52491a3706',{headers:{'Content-Type': 'application/json'}, method: 'DELETE'})
.then(x => x.json())
.then(x => console.log({ ...x }))

------------- Fetch Patch to parcially update an element
fetch('http://localhost:3000/products/61ad256aeb0783153e5107ad',{headers:{'Content-Type': 'application/json'}, method: 'PATCH', body: JSON.stringify([{
    propName: 'price', 
    value: 1800
}])})
.then(x => x.json())
.then(x => console.log({ ...x }))


4. Mongoose validation
------Improve products schema
const mongoose = require('mongoose')

const Product = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    name: { type: String, required: true }, 
    price: { type: Number, required: true }
})

module.exports = mongoose.model('Product', Product)

---------







































































































































































