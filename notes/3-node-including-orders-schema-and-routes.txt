1. Order Schema

-------order.js schema code

const mongoose = require('mongoose')

const Order = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true},
    quantity: { type: Number, required: true }
})

module.exports = mongoose.model('Order', Order)


------------- orders.js code

const express = require('express')

const router = express.Router()

const Order = require('../models/order')
const Product = require('../models/product')

const mongoose = require('mongoose')




router.get('/', (req, res, next) => {

    Order.find() // .where , .limit   we could use more query operators
    .select('product quantity _id')
    // .populate('product')
    .populate('product', 'name')
    .exec()
    .then(result => {
       
        const response = {
            count: result.length,
            orders: result.map(order => {
                return {
                    // ...order,
                    product: order.product,
                    quantity: order.quantity,
                    _id: order._id,
                    url: {
                        type: 'GET',
                        url: `http://localhost/:3000/orders/${order._id}`
                    }
                }
            })
        }
        res.status(200).json({response})      
    })
    
    .catch(err => {
        console.log('FROM DB: ', err)
        res.status(500).json({
            error: err
        })
    })

})

router.get('/:id', (req, res, next) => {
   const _id = req.params.id
//    Order.findOne({ _id })
   Order.findById(_id)
    .populate('product')
   .exec()
   .then( result => {
        if (!result){
            return res.status(404).json({
                message: 'Order not Found'
            })
        }
       console.log('From DB: ', result)
       if (result){
            res.status(200).json({
                message: 'Handling GET requests for /orders/id',
                order: result
            })
       }
       else{
            res.status(404).json({
                message: 'No valid entry found for provided ID'
            })
       }
   })
   .catch(err => {
       console.log(err)
       res.status(500).json({
           error: err
       })
   })
})


router.post('/', (req, res, next) => {
    Product.findById(req.body.product)
    // console.log(req.body.productId)
    .then(result => {

        if (!result){
            return res.status(404).json({
                message: 'Product Not found'
            })
        }
        const order = new Order({
            _id: new mongoose.Types.ObjectId(),
            product: req.body.product,
            quantity: req.body.quantity
        })
    
        return order.save() //return another promise to handled below
      
    })

    .then( result => {
        console.log(result)
        res.status(201).json({
            message: 'Handling POST requests to /products',
            createdProduct: result
        })
    })
    .catch(err => {
        console.log(err)
        res.status(500).json({
            error: err
        })
    })

    // .catch(err => {
    //     res.status(500).json({error: 'Product NOT found'})
    // })
})

// router.put('/:id', (req, res, next) => {
//     res.status(200).json({
//         message:'Hello from Put',   
//         body: req.body,
//         id: req.params.id
//     })
// })

router.patch('/:id', (req, res, next) => {
    // const { name, price } = req.body
    const _id = req.params.id
    const updateProps = {};
    for (const props of req.body){
        updateProps[props.propName] = props.value
    }

    Order.findByIdAndUpdate({ _id }, { $set: updateProps })
    // Order.update({ _id }, { $set: updateProps })
    .exec()
    .then(result => {
        console.log('From DB: ', result)
        res.status(200).json({
            message: 'Handling PATCH requests to /orders',
            result: result
        })
    })
    .catch(err => {
        console.log(err)
        res.status(500).json({
            error: err
        })
    })
})

router.delete('/:id', (req, res, next) => {
    const _id = req.params.id
    Order.findByIdAndDelete({ _id })
    // Order.remove({ _id })  // deprecated : use remoteOne or findByIdAndDelete instead...
    // console.log( _id )
    .exec()
    .then(result => {
        console.log('From DB: ', result)
        res.status(200).json({
            message: 'Handling DELETE requests to /products',
            result: result
        })
    })
    .catch(err => {
        console.log('Error', err)
        res.status(500).json({
            message: 'Error on handling DELETE requests to /products',
            error: err
        })
    })
})


module.exports = router




------------ fetch GET for /orders
fetch('http://localhost:3000/orders')
.then(x => x.json())
.then(x => console.log({ ...x }))

------------ fetch POST for /orders
fetch('http://localhost:3000/orders',{headers:{'Content-Type': 'application/json'}, method: 'POST', body: JSON.stringify({
    product: '61ad256aeb0783153e5107ad',
    quantity: 2
})})
.then(x => x.json())
.then(x => console.log({ ...x }))

------------ fetch PATCH for /orders
fetch('http://localhost:3000/orders/61ad41aff22b5005e7da134b',{headers:{'Content-Type': 'application/json'}, method: 'PATCH', body: JSON.stringify([{
    propName: 'quantity', value: 75
}])})
.then(x => x.json())
.then(x => console.log({ ...x }))

------------ fetch DELETE for /order
fetch('http://localhost:3000/orders/61b0ac300f691e5571383089',{headers:{'Content-Type':'application/json'},method:'DELETE'})
.then(x => x.json())
.then(x => console.log({ ...x }))







2.  App.js
const express = require('express')
const app = express();
const morgan = require('morgan')
const bodyParser = require('body-parser')
const mongoose = require('mongoose')


const products = require('./api/routes/products')
const orders = require('./api/routes/orders')




// mongoose connection

// mongoose.connect('mongodb+srv://'+ process.env.MONGO_ATLAS_PW +':'+ process.env.MONGO_ATLAS_PW +'@cluster0.imo0m.mongodb.net/myFirstDatabase?retryWrites=true&w=majority',
// {
//     // useMongoClient: true,
//     useNewUrlParser: true,
//     useUnifiedTopology: true
// }, //useMongoClient - under the hood it will use the mongodb client for the connection. it is the recommended way.
// )
// we can set the pw and user in environment variables in the server were the app lives to avoide hardcoded it.
//We can use it with nodemon by adding the nodemon.json file and condigure it.


mongoose.connect('mongodb+srv://taskcarlos:vKi759EkWU37QjUE@cluster0.imo0m.mongodb.net/myFirstDatabase?retryWrites=true&w=majority',
{
    // useMongoClient: true,
    useNewUrlParser: true,
    useUnifiedTopology: true
})


app.use(morgan('dev')) //call morgan

app.use(bodyParser.urlencoded({extended: false}))
app.use(bodyParser.json()) //kind of padies


// CORS: Cross-Origin-Resource-Sharing
// Let's append the headers to any response we send back. We should do it before the routes declaration. 
app.use((req, res, next) => {
    // Let's add some header to the response. This middleware will not send the reponse. it will just adjust it so that wherever I send it, it  has this headers.
    //the cors error message says: No Access Control Allow at origin headers is present. Now we set it. So it will be present. 
    /* The * gives access  to any origin.*/
    res.header('Access-Control-Allow-Origin', '*') // instead of * we could use an especific url to restrict it like: https://www.my-page.com. But normally for API we want to receive requests to all our routes.  
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization') // we could use the *  to accept all of the headers.

    // Check if the incoming request method property is a property is equal to 'OPTIONS'. Because browsers will always send an option request first when the client send a POST , PUT request. This is basically something that can NOT be avoided. Because this allows the browser to see if it can make the following request or if it is allowed to do that request to the API.
    //Method is the property which allows us to access to the method used on the request sent by the cliennt.
    if(req.method === 'OPTIONS'){
        // If the option request is sent first. then we add an additional header where we tell the browser what it may send to the backend.
        res.header('Access-Control-Methods', 'PUT, POST, PATCH, DELETE, GET')

        //So if we receive such an options request we then will return a the following response.
        return res.status(200).json({}) //pass an empty payload. we do not need to go to the routes because the options request is just to find out which options are allowed. And by sending back the reponse where we have added all this cors headers we do provide all this answer.
    }
    next()
}) //this set up ensures that we prevent Cors Errors


app.use('/products', products)
app.use('/orders', orders)



// handle erros: handle every request that is not handled or supported by the rest of endpoints
app.use((req, res, next) => {
    const error = new Error('Not Found')
    error.status = 404 //Not Found
    next(error) //forward the request with the error obj to the next middleware below.
})

app.use((error, req, res, next) => {
    res.status(error.status || 500)   //
    res.json({
        error:{
            message: error.message
        }
    })
})


module.exports = app
